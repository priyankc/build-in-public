<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-19T21:37:15-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Priyank Chodisetti</title><entry><title type="html">Let Claue Code control your NodeJS debugger</title><link href="http://localhost:4000/projects/2025/03/19/vibe-debugging.html" rel="alternate" type="text/html" title="Let Claue Code control your NodeJS debugger" /><published>2025-03-19T00:00:00-07:00</published><updated>2025-03-19T00:00:00-07:00</updated><id>http://localhost:4000/projects/2025/03/19/vibe-debugging</id><content type="html" xml:base="http://localhost:4000/projects/2025/03/19/vibe-debugging.html"><![CDATA[<p><b>Problem<b></b></b></p>

<p>We experienced debugging death loop while vibe coding.</p>

<p>Debugging Death Loop:</p>
<ul>
  <li>Copy the exception or error</li>
  <li>Paste it into Claude/Cursor</li>
  <li>Hope it will fix it.</li>
</ul>

<p>It will fail, and you will try again hoping it will get it this time. Pretty soon, it will become 20 times and frustrating. No more vibes!</p>

<p><b>Current Options<b></b></b></p>

<p>When researched online, the current options are:</p>
<ul>
  <li>Understand code better: I think this is preaching old ways to new class of programmers - vibe coders.</li>
  <li>Add log lines: To be effective, you should understand code better.</li>
</ul>

<p>We thought about how an experienced programmer approach programming - by using a debugger and stepping through code. What if we allow Claude Code to set breakpoints, step through code and inspect variables?</p>

<p><b>Solution<b></b></b></p>

<p>We built an MCP server for exactly that. You can try yourself:</p>
<ol>
  <li>Run your NodeJS server with <code class="language-plaintext highlighter-rouge">--inspect</code> flag that accepts remote debugger</li>
  <li>Add our MCP using the following command <code class="language-plaintext highlighter-rouge">claude mcp add nodejs-debugger npx @hyperdrive-eng/mcp-nodejs-debugger</code></li>
  <li>Sit back and enjoy the magic with Claude debugging yoru code!</li>
</ol>

<p><b>Important Links<b></b></b></p>
<ul>
  <li><a href="https://github.com/hyperdrive-eng/mcp-nodejs-debugger">Github Repo</a></li>
  <li><a href="https://www.npmjs.com/package/@hyperdrive-eng/mcp-nodejs-debugger">NPM Package</a></li>
</ul>

<h3 id="demo">Demo</h3>
<iframe width="800" height="605" src="/assets/videos/mcp-nodejs-debugger.mp4" frameborder="0" allowfullscreen=""></iframe>

<style>
    .site-footer {
        display: none;
    }

    .post-title {
        font-size: 36px;
    }
    iframe {
        margin-top: 0;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[Problem]]></summary></entry><entry><title type="html">Learnings from Complexity Analysis Prototype</title><link href="http://localhost:4000/projects/2025/03/15/complexity-learnings.html" rel="alternate" type="text/html" title="Learnings from Complexity Analysis Prototype" /><published>2025-03-15T00:00:00-07:00</published><updated>2025-03-15T00:00:00-07:00</updated><id>http://localhost:4000/projects/2025/03/15/complexity-learnings</id><content type="html" xml:base="http://localhost:4000/projects/2025/03/15/complexity-learnings.html"><![CDATA[<ul>
  <li>(+) They love the insights about highly complex components.</li>
  <li>(+) People liked relative priritization of fixes proposed.</li>
  <li>(+) People absolutely loved the entire architecture diagram produced.</li>
  <li>(-) Complexity is not how folks think day to day.</li>
  <li>(-) People said they might use it a couple of times now and then.</li>
  <li>(-) Bottle neck is not the lack of knowledge, but lack of resources to prioritize.</li>
  <li>(-) Business priorities mostly trump tech health. Many users we talked to would push state of things to the edge of failure and squeeze every last min for business priorities.</li>
  <li>(-) Complexity as a concept is too theoritical and not currently operational. No one is truly burned by this problem directly. It’s not like many of them are actively looking for solutions to solve it.</li>
</ul>

<p><b>Takeaway<b></b></b></p>

<p>We decided to narrow down our ICP from software engineers in traditional enterprises to Vibe coders! Reasons are two fold:</p>
<ol>
  <li>We ourselves are Vibe Coders and can more directly solve our own problems by using our experience as traditional developers.</li>
  <li>Challenges with Vibe coding are urgent problems for Vibe Coders! Quality of solutions will make or break a Vibe Coder’s ongoing projects as they would lack skill or resources to approach the same challenges using more traditional software engineering methods.</li>
</ol>

<style>
    .site-footer {
        display: none;
    }

    .post-title {
        font-size: 36px;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[(+) They love the insights about highly complex components. (+) People liked relative priritization of fixes proposed. (+) People absolutely loved the entire architecture diagram produced. (-) Complexity is not how folks think day to day. (-) People said they might use it a couple of times now and then. (-) Bottle neck is not the lack of knowledge, but lack of resources to prioritize. (-) Business priorities mostly trump tech health. Many users we talked to would push state of things to the edge of failure and squeeze every last min for business priorities. (-) Complexity as a concept is too theoritical and not currently operational. No one is truly burned by this problem directly. It’s not like many of them are actively looking for solutions to solve it.]]></summary></entry><entry><title type="html">Run Complexity Analysis on your Repo</title><link href="http://localhost:4000/projects/2025/03/12/complexity-analysis.html" rel="alternate" type="text/html" title="Run Complexity Analysis on your Repo" /><published>2025-03-12T00:00:00-07:00</published><updated>2025-03-12T00:00:00-07:00</updated><id>http://localhost:4000/projects/2025/03/12/complexity-analysis</id><content type="html" xml:base="http://localhost:4000/projects/2025/03/12/complexity-analysis.html"><![CDATA[<p>We have a version that you can use on your desktop to do complexity analysis.</p>

<ul>
  <li>
    <p><a href="https://drive.google.com/file/d/1FunJF_N4mBfgYQDNvJsW2XWhcgu9jZbh/view?usp=drive_link">Download Here</a></p>
  </li>
  <li>
    <p>A Quick How-To Video</p>
  </li>
</ul>
<iframe width="800" height="605" src="/assets/videos/complexity-analysis.mov" frameborder="0" allowfullscreen=""></iframe>

<style>
    .site-footer {
        display: none;
    }

    .post-title {
        font-size: 36px;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[We have a version that you can use on your desktop to do complexity analysis.]]></summary></entry><entry><title type="html">An Example Complexity Report</title><link href="http://localhost:4000/analysis/2025/03/10/api-complexity-analysis.html" rel="alternate" type="text/html" title="An Example Complexity Report" /><published>2025-03-10T00:00:00-07:00</published><updated>2025-03-10T00:00:00-07:00</updated><id>http://localhost:4000/analysis/2025/03/10/api-complexity-analysis</id><content type="html" xml:base="http://localhost:4000/analysis/2025/03/10/api-complexity-analysis.html"><![CDATA[<p>Did this analysis using the Complexity Analysis tool. Ran this analysis on API end points.</p>

<p>Repo: https://github.com/didinj/node-express-postgresql-sequelize/blob/master/routes/index.js</p>

<h1 id="architecture-analysis">Architecture Analysis</h1>

<h3 id="system-architecture-diagram">System Architecture Diagram</h3>

<pre><code class="language-mermaid">flowchart LR
    subgraph API_Routes ["API Routes"]
        GET_Root["GET /\n(1)"]
        GET_Classroom["GET /api/classroom\n(3)"]
        GET_ClassroomById["GET /api/classroom/:id\n(4)"]
        POST_Classroom["POST /api/classroom\n(4)"]
        PUT_Classroom["PUT /api/classroom/:id\n(4)"]
        DELETE_Classroom["DELETE /api/classroom/:id\n(4)"]
        GET_Student["GET /api/student\n(3)"]
        GET_StudentById["GET /api/student/:id\n(4)"]
        POST_Student["POST /api/student\n(4)"]
        PUT_Student["PUT /api/student/:id\n(4)"]
        DELETE_Student["DELETE /api/student/:id\n(4)"]
        GET_Lecturer["GET /api/lecturer\n(3)"]
        GET_LecturerById["GET /api/lecturer/:id\n(4)"]
        POST_Lecturer["POST /api/lecturer\n(4)"]
        PUT_Lecturer["PUT /api/lecturer/:id\n(4)"]
        DELETE_Lecturer["DELETE /api/lecturer/:id\n(4)"]
        GET_Course["GET /api/course\n(3)"]
        GET_CourseById["GET /api/course/:id\n(5)"]
        POST_Course["POST /api/course\n(4)"]
        PUT_Course["PUT /api/course/:id\n(5)"]
        DELETE_Course["DELETE /api/course/:id\n(4)"]
        POST_StudentAddCourse["POST /api/student/add_course\n(7)"]
        POST_ClassroomAddWithStudents["POST /api/classroom/add_with_students\n(8)"]
        POST_LecturerAddWithCourse["POST /api/lecturer/add_with_course\n(7)"]
    end

    subgraph Controllers ["Controllers"]
        ClassroomController["Classroom Controller\n(6)"]
        StudentController["Student Controller\n(7)"]
        LecturerController["Lecturer Controller\n(6)"]
        CourseController["Course Controller\n(5)"]
    end
    
    subgraph Models ["Database Models"]
        ClassroomModel["Classroom Model\n(3)"]
        StudentModel["Student Model\n(4)"]
        LecturerModel["Lecturer Model\n(3)"]
        CourseModel["Course Model\n(4)"]
        SequelizeCore["Sequelize Core\n(5)"]
        StudentCourse["StudentCourse\n(Junction Table)"]
    end

    %% API Routes to Controllers
    GET_Classroom --&gt; ClassroomController
    GET_ClassroomById --&gt; ClassroomController
    POST_Classroom --&gt; ClassroomController
    PUT_Classroom --&gt; ClassroomController
    DELETE_Classroom --&gt; ClassroomController
    POST_ClassroomAddWithStudents --&gt; ClassroomController
    
    GET_Student --&gt; StudentController
    GET_StudentById --&gt; StudentController
    POST_Student --&gt; StudentController
    PUT_Student --&gt; StudentController
    DELETE_Student --&gt; StudentController
    POST_StudentAddCourse --&gt; StudentController
    
    GET_Lecturer --&gt; LecturerController
    GET_LecturerById --&gt; LecturerController
    POST_Lecturer --&gt; LecturerController
    PUT_Lecturer --&gt; LecturerController
    DELETE_Lecturer --&gt; LecturerController
    POST_LecturerAddWithCourse --&gt; LecturerController
    
    GET_Course --&gt; CourseController
    GET_CourseById --&gt; CourseController
    POST_Course --&gt; CourseController
    PUT_Course --&gt; CourseController
    DELETE_Course --&gt; CourseController
    
    %% Controllers to Models
    ClassroomController --&gt; ClassroomModel
    ClassroomController --&gt; StudentModel
    StudentController --&gt; StudentModel
    StudentController --&gt; ClassroomModel
    StudentController --&gt; CourseModel
    StudentController --&gt; StudentCourse
    LecturerController --&gt; LecturerModel
    LecturerController --&gt; CourseModel
    CourseController --&gt; CourseModel
    CourseController --&gt; StudentModel
    CourseController --&gt; LecturerModel
    
    %% Model relationships
    ClassroomModel --&gt; StudentModel
    LecturerModel --&gt; CourseModel
    StudentModel --&gt; CourseModel
    StudentModel --&gt; StudentCourse
    CourseModel --&gt; StudentCourse
    CourseModel --&gt; LecturerModel
    
    %% Models to Sequelize
    ClassroomModel --&gt; SequelizeCore
    StudentModel --&gt; SequelizeCore
    LecturerModel --&gt; SequelizeCore
    CourseModel --&gt; SequelizeCore
    StudentCourse --&gt; SequelizeCore

    %% Styling
    classDef low fill:#90EE90,stroke:#333,stroke-width:1px;
    classDef medium fill:#FFD700,stroke:#333,stroke-width:1px;
    classDef high fill:#FF6347,stroke:#333,stroke-width:1px;
    
    class GET_Root,GET_Classroom,GET_Student,GET_Lecturer,GET_Course,ClassroomModel,LecturerModel low;
    class GET_ClassroomById,GET_StudentById,GET_LecturerById,GET_CourseById,POST_Classroom,POST_Student,POST_Lecturer,POST_Course,PUT_Classroom,PUT_Student,PUT_Lecturer,PUT_Course,DELETE_Classroom,DELETE_Student,DELETE_Lecturer,DELETE_Course,CourseController,StudentModel,CourseModel,SequelizeCore,StudentCourse medium;
    class POST_StudentAddCourse,POST_LecturerAddWithCourse,POST_ClassroomAddWithStudents,StudentController,ClassroomController,LecturerController high;
</code></pre>

<h2 id="complexity-hotspots-analysis">Complexity Hotspots Analysis</h2>

<p>After completing the architecture analysis, we’ve identified several high-complexity hotspots in the system that require attention. The following is a detailed analysis of each hotspot, ranked by severity:</p>

<h3 id="1-post-apiclassroomadd_with_students-complexity-score-810">1. POST /api/classroom/add_with_students (Complexity Score: 8/10)</h3>

<p><strong>Current Issues:</strong></p>
<ul>
  <li>Complex nested creation operation with two different models</li>
  <li>No transaction management for multi-step operations</li>
  <li>Risk of partial data creation on failure (classroom created but students not)</li>
  <li>Missing validation for nested student data</li>
  <li>No bulk insert optimization</li>
  <li>Inconsistent error handling between parent and child operations</li>
  <li>Poor error reporting that doesn’t indicate which part failed</li>
</ul>

<p><strong>Proposed Fixes:</strong></p>
<ul>
  <li>Implement explicit Sequelize transactions to ensure atomicity</li>
  <li>Add comprehensive validation for both classroom and student data</li>
  <li>Use Sequelize bulk insert capabilities for student creation</li>
  <li>Standardize error handling with specific error types</li>
  <li>Improve error messages to indicate the exact failure point</li>
  <li>Add database constraints to ensure data integrity</li>
</ul>

<p><strong>Effort &amp; Impact:</strong></p>
<ul>
  <li><strong>Effort:</strong> Medium (3-5 engineering days)</li>
  <li><strong>Impact:</strong> High (Prevents data inconsistency, improves error handling)</li>
</ul>

<h3 id="2-post-apistudentadd_course-complexity-score-710">2. POST /api/student/add_course (Complexity Score: 7/10)</h3>

<p><strong>Current Issues:</strong></p>
<ul>
  <li>Many-to-many relationship management without transaction safety</li>
  <li>Potential race conditions when multiple students enroll concurrently</li>
  <li>Excessive database queries without batching</li>
  <li>No validation that the course exists before relationship creation</li>
  <li>Missing validation for course enrollment eligibility</li>
  <li>No handling of duplicate enrollment attempts</li>
</ul>

<p><strong>Proposed Fixes:</strong></p>
<ul>
  <li>Implement explicit transaction management</li>
  <li>Add pre-validation of course existence and enrollment eligibility</li>
  <li>Create a robust duplicate enrollment detection mechanism</li>
  <li>Optimize with bulk operations where possible</li>
  <li>Implement proper error handling with specific error types</li>
  <li>Add concurrency control for high-volume enrollment periods</li>
</ul>

<p><strong>Effort &amp; Impact:</strong></p>
<ul>
  <li><strong>Effort:</strong> Medium (2-4 engineering days)</li>
  <li><strong>Impact:</strong> High (Prevents data inconsistency, improves performance)</li>
</ul>

<h3 id="3-post-apilectureradd_with_course-complexity-score-710">3. POST /api/lecturer/add_with_course (Complexity Score: 7/10)</h3>

<p><strong>Current Issues:</strong></p>
<ul>
  <li>Nested creation with one-to-many relationship</li>
  <li>No transaction management for multi-step operations</li>
  <li>Risk of partial data creation on failure</li>
  <li>Missing validation for course data</li>
  <li>Inconsistent error handling</li>
  <li>No checks for existing relationships before creating</li>
</ul>

<p><strong>Proposed Fixes:</strong></p>
<ul>
  <li>Add transaction management for atomicity</li>
  <li>Implement comprehensive validation for both lecturer and course data</li>
  <li>Improve error handling with specific error types</li>
  <li>Add checks for existing relationships</li>
  <li>Standardize response formats for success and failure cases</li>
  <li>Create reusable patterns for nested entity creation</li>
</ul>

<p><strong>Effort &amp; Impact:</strong></p>
<ul>
  <li><strong>Effort:</strong> Medium (2-4 engineering days)</li>
  <li><strong>Impact:</strong> Medium-High (Prevents data inconsistency, improves reliability)</li>
</ul>

<h3 id="4-student-controller-complexity-score-710">4. Student Controller (Complexity Score: 7/10)</h3>

<p><strong>Current Issues:</strong></p>
<ul>
  <li>Manages multiple complex relationships</li>
  <li>Handles many-to-many relationship with courses without transaction safety</li>
  <li>Implements multiple model dependencies increasing coupling</li>
  <li>Contains complex nested queries</li>
  <li>Has inconsistent error handling patterns</li>
  <li>Lacks proper validation before database operations</li>
</ul>

<p><strong>Proposed Fixes:</strong></p>
<ul>
  <li>Extract relationship management into service classes</li>
  <li>Implement consistent transaction patterns</li>
  <li>Add comprehensive validation using middleware</li>
  <li>Create standardized error handling utilities</li>
  <li>Restructure to reduce coupling with multiple models</li>
  <li>Implement query optimization for common operations</li>
</ul>

<p><strong>Effort &amp; Impact:</strong></p>
<ul>
  <li><strong>Effort:</strong> High (5-8 engineering days)</li>
  <li><strong>Impact:</strong> High (Improves maintainability, reduces bugs)</li>
</ul>

<h3 id="5-get-apicourseid-complexity-score-510">5. GET /api/course/:id (Complexity Score: 5/10)</h3>

<p><strong>Current Issues:</strong></p>
<ul>
  <li>Circular reference issue: includes Course model within itself</li>
  <li>Incorrect eager loading causing potential errors</li>
  <li>Performance issues with unnecessary data retrieval</li>
  <li>Inconsistent error response codes (404 vs 400)</li>
</ul>

<p><strong>Proposed Fixes:</strong></p>
<ul>
  <li>Fix the circular reference by correctly specifying related models</li>
  <li>Optimize the query to load only necessary data</li>
  <li>Standardize error response patterns</li>
  <li>Implement consistent response structures</li>
</ul>

<p><strong>Effort &amp; Impact:</strong></p>
<ul>
  <li><strong>Effort:</strong> Low (1-2 engineering days)</li>
  <li><strong>Impact:</strong> Medium (Fixes errors, improves performance)</li>
</ul>

<h2 id="system-wide-architectural-issues">System-Wide Architectural Issues</h2>

<p>Beyond the specific hotspots, our analysis reveals several system-wide issues that should be addressed:</p>

<ol>
  <li><strong>Lack of Transaction Management:</strong>
    <ul>
      <li>None of the controllers implement explicit transactions for multi-step operations</li>
      <li>Recommendation: Create a transaction middleware or utility function for consistent usage</li>
    </ul>
  </li>
  <li><strong>Inconsistent Error Handling:</strong>
    <ul>
      <li>Error handling varies across controllers with mixed HTTP status codes</li>
      <li>Recommendation: Implement a centralized error handling mechanism with consistent patterns</li>
    </ul>
  </li>
  <li><strong>Model Relationship Management:</strong>
    <ul>
      <li>Complex relationships are managed directly in controllers without abstraction</li>
      <li>Recommendation: Create service classes to handle relationship management</li>
    </ul>
  </li>
  <li><strong>Query Optimization Issues:</strong>
    <ul>
      <li>Potential N+1 query problems with eager loading in several endpoints</li>
      <li>Recommendation: Audit all eager loading patterns and optimize with includes</li>
    </ul>
  </li>
  <li><strong>Validation Gaps:</strong>
    <ul>
      <li>Limited input validation before database operations</li>
      <li>Recommendation: Implement comprehensive validation middleware</li>
    </ul>
  </li>
</ol>

<h2 id="recommended-next-steps">Recommended Next Steps</h2>

<p>Based on our analysis, here’s the recommended sequence of refactoring operations:</p>

<ol>
  <li>First address the critical POST endpoints with complexity scores of 7 or higher:
    <ul>
      <li>Implement transaction management in POST /api/classroom/add_with_students</li>
      <li>Fix validation and error handling in POST /api/student/add_course</li>
      <li>Address the atomicity issues in POST /api/lecturer/add_with_course</li>
    </ul>
  </li>
  <li>Create system-wide improvements:
    <ul>
      <li>Develop a transaction utility for consistent usage across controllers</li>
      <li>Implement standardized error handling middleware</li>
      <li>Create a validation framework for all endpoints</li>
    </ul>
  </li>
  <li>Address secondary issues:
    <ul>
      <li>Fix the circular reference in GET /api/course/:id</li>
      <li>Optimize query patterns across all controllers</li>
      <li>Refactor the Student Controller to reduce complexity</li>
    </ul>
  </li>
</ol>

<p>By following this approach, the system will gain significant improvements in reliability, maintainability, and performance while reducing the risk of data inconsistency issues.</p>

<p>Final complexity assessment complete. No further processing required.</p>

<h2 id="overall-system-complexity">Overall System Complexity</h2>

<h3 id="system-name-express-postgresql-api-score-610">System Name: Express PostgreSQL API (Score: 6/10)</h3>

<p><strong>System-Level Metrics:</strong></p>
<ul>
  <li>Total Dependencies: 10</li>
  <li>Core Responsibilities: 21</li>
</ul>

<p><strong>Reasons for System Complexity:</strong></p>
<ul>
  <li>Multiple interconnected entity models</li>
  <li>Complex relationships (one-to-many, many-to-many)</li>
  <li>Nested creation operations</li>
  <li>Lack of transaction management</li>
  <li>Inconsistent error handling</li>
  <li>Potential N+1 query issues</li>
  <li>Circular references in API design</li>
</ul>

<h2 id="component-complexity-analysis">Component Complexity Analysis</h2>

<h3 id="course-controller-score-510">Course Controller (Score: 5/10)</h3>

<p><strong>Complexity Breakdown:</strong></p>
<ul>
  <li>Dependencies: 3</li>
  <li>Responsibilities: 5</li>
</ul>

<p><strong>Reasons for Complexity:</strong></p>
<ul>
  <li>Manages CRUD operations for courses</li>
  <li>Handles relationships with Students and Lecturers</li>
  <li>Implements eager loading of related entities</li>
  <li>Contains error handling for various scenarios</li>
  <li>Has some inconsistent error handling (404 vs 400)</li>
</ul>

<h3 id="student-model-score-410">Student Model (Score: 4/10)</h3>

<p><strong>Complexity Breakdown:</strong></p>
<ul>
  <li>Dependencies: 2</li>
  <li>Responsibilities: 2</li>
</ul>

<p><strong>Reasons for Complexity:</strong></p>
<ul>
  <li>Defines many-to-many relationship with Course model</li>
  <li>Defines belongs-to relationship with Classroom model</li>
  <li>Uses junction table (StudentCourse) for course relationships</li>
</ul>

<h3 id="course-model-score-410">Course Model (Score: 4/10)</h3>

<p><strong>Complexity Breakdown:</strong></p>
<ul>
  <li>Dependencies: 2</li>
  <li>Responsibilities: 2</li>
</ul>

<p><strong>Reasons for Complexity:</strong></p>
<ul>
  <li>Defines many-to-many relationship with Student model</li>
  <li>Defines belongs-to relationship with Lecturer model</li>
  <li>Uses junction table (StudentCourse) for student relationships</li>
</ul>

<h3 id="classroom-model-score-310">Classroom Model (Score: 3/10)</h3>

<p><strong>Complexity Breakdown:</strong></p>
<ul>
  <li>Dependencies: 1</li>
  <li>Responsibilities: 1</li>
</ul>

<p><strong>Reasons for Complexity:</strong></p>
<ul>
  <li>Defines one-to-many relationship with Student model</li>
  <li>Simple data structure with minimal properties</li>
</ul>

<h3 id="lecturer-model-score-310">Lecturer Model (Score: 3/10)</h3>

<p><strong>Complexity Breakdown:</strong></p>
<ul>
  <li>Dependencies: 1</li>
  <li>Responsibilities: 1</li>
</ul>

<p><strong>Reasons for Complexity:</strong></p>
<ul>
  <li>Defines one-to-one relationship with Course model</li>
  <li>Simple data structure with minimal properties</li>
</ul>

<h2 id="hotspots-analysis">Hotspots Analysis</h2>

<h3 id="post-apiclassroomadd_with_students-score-8">POST /api/classroom/add_with_students (Score: 8)</h3>

<p><strong>Issues:</strong></p>
<ul>
  <li>Complex nested creation operation with two models</li>
  <li>No transaction management for multi-step operations</li>
  <li>Risk of partial data creation on failure</li>
  <li>Missing validation for nested student data</li>
  <li>No bulk insert optimization</li>
  <li>Inconsistent error handling between parent and child operations</li>
  <li>Poor error reporting that doesn’t indicate which part failed</li>
</ul>

<p><strong>Refactoring Strategy:</strong>
Implement explicit transactions, add comprehensive validation, use Sequelize hooks for better error handling, and implement bulk inserts for improved performance.</p>

<h3 id="post-apistudentadd_course-score-7">POST /api/student/add_course (Score: 7)</h3>

<p><strong>Issues:</strong></p>
<ul>
  <li>Many-to-many relationship management without transaction safety</li>
  <li>Potential race conditions when multiple concurrent operations occur</li>
  <li>Excessive database queries without batching</li>
  <li>No validation that the course exists before relationship creation</li>
  <li>Missing validation for course enrollment eligibility</li>
  <li>No handling of duplicate enrollment attempts</li>
</ul>

<p><strong>Refactoring Strategy:</strong>
Implement explicit transaction management, add pre-validation of course existence, handle duplicate enrollments gracefully, optimize with bulk operations, and add proper error handling for common failure cases.</p>

<h3 id="post-apilectureradd_with_course-score-7">POST /api/lecturer/add_with_course (Score: 7)</h3>

<p><strong>Issues:</strong></p>
<ul>
  <li>Nested creation with one-to-many relationship</li>
  <li>No transaction management for multi-step operations</li>
  <li>Risk of partial data creation on failure</li>
  <li>Missing validation for course data</li>
  <li>Inconsistent error handling</li>
  <li>No checks for existing relationships before creating</li>
</ul>

<p><strong>Refactoring Strategy:</strong>
Add transaction management, implement comprehensive validation for both lecturer and course data, improve error handling with specific error types, and ensure atomicity of the creation process.</p>

<h3 id="student-controller-score-7">Student Controller (Score: 7)</h3>

<p><strong>Issues:</strong></p>
<ul>
  <li>Manages multiple complex relationships</li>
  <li>Handles many-to-many relationship with courses without transaction safety</li>
  <li>Implements multiple model dependencies increasing coupling</li>
  <li>Contains complex nested queries</li>
  <li>Has inconsistent error handling patterns</li>
  <li>Lacks proper validation before database operations</li>
</ul>

<p><strong>Refactoring Strategy:</strong>
Extract relationship management into service classes, implement consistent transaction patterns, add comprehensive validation, and restructure error handling with standardized responses.</p>

<h3 id="get-apicourseid-score-5">GET /api/course/:id (Score: 5)</h3>

<p><strong>Issues:</strong></p>
<ul>
  <li>Circular reference issue: includes Course model within itself</li>
  <li>Incorrect eager loading causing potential errors</li>
  <li>Performance issues with unnecessary data retrieval</li>
  <li>Inconsistent error response codes (404 vs 400)</li>
</ul>

<p><strong>Refactoring Strategy:</strong>
Fix the circular reference by correctly specifying related models, standardize error response patterns, and optimize the query to load only necessary data.</p>

<h2 id="current-phase">Current Phase</h2>

<ul>
  <li>Phase: analysis</li>
  <li>Complete: Yes</li>
</ul>

<h2 id="files-processed">Files Processed</h2>

<ul>
  <li>/Users/priyank/Dev/node-express-postgresql-sequelize/controllers/course.js</li>
  <li>/Users/priyank/Dev/node-express-postgresql-sequelize/models/student.js</li>
  <li>/Users/priyank/Dev/node-express-postgresql-sequelize/models/classroom.js</li>
  <li>/Users/priyank/Dev/node-express-postgresql-sequelize/models/course.js</li>
  <li>/Users/priyank/Dev/node-express-postgresql-sequelize/models/lecturer.js</li>
</ul>

<h2 id="next-files-to-process">Next Files to Process</h2>]]></content><author><name></name></author><category term="analysis" /><summary type="html"><![CDATA[Did this analysis using the Complexity Analysis tool. Ran this analysis on API end points.]]></summary></entry><entry><title type="html">A Clearer Hypothesis: It’s All About Managing Complexity</title><link href="http://localhost:4000/projects/2025/03/09/narrowed-down-hypothesis.html" rel="alternate" type="text/html" title="A Clearer Hypothesis: It’s All About Managing Complexity" /><published>2025-03-09T00:00:00-08:00</published><updated>2025-03-09T00:00:00-08:00</updated><id>http://localhost:4000/projects/2025/03/09/narrowed-down-hypothesis</id><content type="html" xml:base="http://localhost:4000/projects/2025/03/09/narrowed-down-hypothesis.html"><![CDATA[<p>We started with the vision of solving software architecture challenges for individuals and organizations. We launched two prototypes: design docs as an early-stage lever and code reviews as a final-stage check.</p>

<p>Users found them useful, giving us confidence that we were exploring the right problem space. When we reviewed all the feedback, we realized that our tools and the challenges users faced were all connected by one thing: managing complexity. We also think that redefining the problem space as improving or understanding complexity is a much better way to articulate our approach. Improving architecture lacks clear measures, while complexity can be tracked and analyzed.</p>

<p>Software complexity has real consequences. It slows down product development and affects developer happiness. Yet, there is no objective way to measure it. LLMs excel at compressing knowledge, making them a powerful tool for this challenge.</p>

<p>We built a quick prototype to track repository complexity over time. It considers factors like module responsibilities and dependencies. The absolute complexity number matters less than the trend. Our goal is to plot complexity at any granularity, track how it changes, and offer solutions.</p>

<p>The prototype will be ready in a few days. I will share an update soon.</p>

<style>
    .site-footer {
        display: none;
    }

    .post-title {
        font-size: 36px;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[We started with the vision of solving software architecture challenges for individuals and organizations. We launched two prototypes: design docs as an early-stage lever and code reviews as a final-stage check.]]></summary></entry><entry><title type="html">Learnings: Code Review Tool</title><link href="http://localhost:4000/projects/2025/03/06/learnings-code-reviews.html" rel="alternate" type="text/html" title="Learnings: Code Review Tool" /><published>2025-03-06T00:00:00-08:00</published><updated>2025-03-06T00:00:00-08:00</updated><id>http://localhost:4000/projects/2025/03/06/learnings-code-reviews</id><content type="html" xml:base="http://localhost:4000/projects/2025/03/06/learnings-code-reviews.html"><![CDATA[<ul>
  <li>(+) They love the tutorial and how they can understand the PR</li>
  <li>(Request) They already have well documented Jira ticket. Reviewer spends a lot of time thinking if the PR is addressing the Jira. If the tool analyzes that and tells them the gaps, it will be super useful to them.</li>
  <li>(+) Loved the code architecture representation</li>
  <li>(-) There is a markdown rendering error for list items</li>
  <li>(-) There were initial bugs around assuming main branch and computing diff. Fixed and updated links</li>
</ul>

<style>
    .site-footer {
        display: none;
    }

    .post-title {
        font-size: 36px;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[(+) They love the tutorial and how they can understand the PR (Request) They already have well documented Jira ticket. Reviewer spends a lot of time thinking if the PR is addressing the Jira. If the tool analyzes that and tells them the gaps, it will be super useful to them. (+) Loved the code architecture representation (-) There is a markdown rendering error for list items (-) There were initial bugs around assuming main branch and computing diff. Fixed and updated links]]></summary></entry><entry><title type="html">New Prototype: Help you do better code reviews</title><link href="http://localhost:4000/projects/2025/03/05/prototype-code-review.html" rel="alternate" type="text/html" title="New Prototype: Help you do better code reviews" /><published>2025-03-05T00:00:00-08:00</published><updated>2025-03-05T00:00:00-08:00</updated><id>http://localhost:4000/projects/2025/03/05/prototype-code-review</id><content type="html" xml:base="http://localhost:4000/projects/2025/03/05/prototype-code-review.html"><![CDATA[<p><strong>Hypothesis:</strong> Code reviews are a big part of developers job. It takes time to process at a high level what a diff is about. It leads to longer cycle times. Faster comprehension of diffs leads to quicker, higher-quality code reviews, reducing cycle times.</p>

<p><strong>Solution:</strong> In many teams, developers walk reviewers through a diff to provide high-level context. This verbal explanation helps the reviewer load the changes into memory, making the review process more effective. Our AI aims to replicate this process by providing a guided walkthrough of any given diff.</p>

<p><strong>Install Instructions</strong></p>

<ol>
  <li><a href="https://drive.google.com/file/d/1-jfXkatJukRXDq0p2iFz1_or0YQniyLQ/view?usp=sharing">Download the Zip</a></li>
  <li>Unzip &amp; Run the application</li>
  <li>When security requests, permit the application</li>
</ol>

<p><strong>Usage Instructions</strong>**</p>
<ol>
  <li>Add a root folder of your repo (left top)</li>
  <li>In the right, select the diff or branch</li>
  <li>Once the instructions are ready, you will see the first instruction with a sticky. You can navigate through instructions by clicking next / prev</li>
  <li>Once overview is ready you can click the Overview tab.</li>
  <li>Click the little eye / pencil icon on the tab to see it in rich view</li>
</ol>

<p><img src="/assets/images/howto.png" alt="Screenshot" /></p>

<p><strong>Background</strong></p>

<p>In our last iteration, we explored improving design docs. We have got great feedback from 10+ users. Based on the learnings from that prototype, this week we wanted to learn about challenges involved in understanding code. We will focus on improving code reviews, a daily activity that requires critical reading and decision-making.</p>

<style>
    .site-footer {
        display: none;
    }

    .post-title {
        font-size: 36px;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[Hypothesis: Code reviews are a big part of developers job. It takes time to process at a high level what a diff is about. It leads to longer cycle times. Faster comprehension of diffs leads to quicker, higher-quality code reviews, reducing cycle times.]]></summary></entry><entry><title type="html">Learnings from Alexandria: Design Doc Writer</title><link href="http://localhost:4000/projects/2024/03/01/alexandria-learnings.html" rel="alternate" type="text/html" title="Learnings from Alexandria: Design Doc Writer" /><published>2024-03-01T00:00:00-08:00</published><updated>2024-03-01T00:00:00-08:00</updated><id>http://localhost:4000/projects/2024/03/01/alexandria-learnings</id><content type="html" xml:base="http://localhost:4000/projects/2024/03/01/alexandria-learnings.html"><![CDATA[<ul>
  <li>(+)People loved mermaid diagrams</li>
  <li>(+)People wanted to use it for cases other than design docs. To write how-tos, internal guides</li>
  <li>(+)People used it to generate explanations for existing code</li>
  <li>(+)Saw a desire for having organizational controls on the tool being very opinionated</li>
  <li>(-)People who tried aren’t really writing the design doc at that moment</li>
  <li>(-)People didn’t really care to read the generated text</li>
</ul>

<style>
    .site-footer {
        display: none;
    }
    .post-title {
        font-size: 36px;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[(+)People loved mermaid diagrams (+)People wanted to use it for cases other than design docs. To write how-tos, internal guides (+)People used it to generate explanations for existing code (+)Saw a desire for having organizational controls on the tool being very opinionated (-)People who tried aren’t really writing the design doc at that moment (-)People didn’t really care to read the generated text]]></summary></entry><entry><title type="html">Introducing Alexandria: A Modern Design Doc Writing Tool</title><link href="http://localhost:4000/projects/2024/03/01/introducing-alexandria.html" rel="alternate" type="text/html" title="Introducing Alexandria: A Modern Design Doc Writing Tool" /><published>2024-03-01T00:00:00-08:00</published><updated>2024-03-01T00:00:00-08:00</updated><id>http://localhost:4000/projects/2024/03/01/introducing-alexandria</id><content type="html" xml:base="http://localhost:4000/projects/2024/03/01/introducing-alexandria.html"><![CDATA[<p>Following our exploration of design doc challenges, we built Alexandria - a prototype to make technical writing easier.</p>

<p>Installation:
1.⁠ <a href="https://drive.google.com/file/d/1AR9tz7W1YGqCpRvn8O5HUM2vo59d9fj4/view?usp=drive_link">⁠Alexandria App (Mac Silicone)</a></p>

<p>2.⁠ ⁠Unzip the app package and run the following command for the first time:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xattr -c ~/Downloads/Alexandria.app 
</code></pre></div></div>
<p>(update the path if downloaded to a different directory)</p>

<p>3.⁠ <a href="https://docs.google.com/document/d/1jKliP37kwhfQVTDBziLXuhFJMaI-PLv-sxzAKD5fIJs/edit?tab=t.0">⁠Alexandria Instructions</a></p>

<p>Give it a try and let us know your thoughts!</p>

<style>
    .site-footer {
        display: none;
    }
    .post-title {
        font-size: 36px;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[Following our exploration of design doc challenges, we built Alexandria - a prototype to make technical writing easier.]]></summary></entry><entry><title type="html">Software Engineering Quality Problems</title><link href="http://localhost:4000/projects/2024/02/24/problem-space.html" rel="alternate" type="text/html" title="Software Engineering Quality Problems" /><published>2024-02-24T00:00:00-08:00</published><updated>2024-02-24T00:00:00-08:00</updated><id>http://localhost:4000/projects/2024/02/24/problem-space</id><content type="html" xml:base="http://localhost:4000/projects/2024/02/24/problem-space.html"><![CDATA[<p>Software Engineering Quality is a problem close to my heart, both as an Engineering Manager and Developer. I have strong opinions in this space and access to friends who can provide early feedback.</p>

<p>The core challenge I’m focusing on: AI code generation is going to only increase and the lack of structured design thinking will lead to bloated, inconsistent architectures. While design phases are critical for decision-making, engineers often skip writing design docs, a key lever for this process. This creates issues down the line.</p>

<p>For this week, we’re testing this hypothesis: “Better design docs lead to better architectural decisions and help manage complexity. Because it takes a lot of effort, developers don’t take initiative to write design docs. If there is a tool that can significantly simplify writing a design doc, more developers will write better design docs.”</p>

<style>
    .site-footer {
        display: none;
    }

    .post-title {
        font-size: 36px;
    }
</style>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[Software Engineering Quality is a problem close to my heart, both as an Engineering Manager and Developer. I have strong opinions in this space and access to friends who can provide early feedback.]]></summary></entry></feed>